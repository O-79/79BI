import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Grid,
  Typography,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  FormHelperText,
  Paper,
  Tab,
  Tabs,
  CircularProgress,
  Chip,
  IconButton,
  Divider,
  SelectChangeEvent,
  ToggleButtonGroup,
  ToggleButton,
  Switch,
  FormControlLabel,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  BarChart as BarChartIcon,
  PieChart as PieChartIcon,
  ShowChart as LineChartIcon,
  TableChart as TableChartIcon,
  Code as CodeIcon,
  Title as TitleIcon,
  Subtitles as SubtitlesIcon,
  TextFormat as TextFormatIcon,
  TextFields as TextFieldsIcon,
  Storage as StorageIcon
} from '@mui/icons-material';
import { projectService } from '../services/projectService';
import { databaseConnectionService, DatabaseConnection } from '../services/databaseConnectionService';
import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';
import { getAuthHeaders } from '../utils/authUtils';

// Define CreateTileDto interface
interface CreateTileDto {
  title: string;
  description?: string;
  type: 'chart' | 'table' | 'metric' | 'text';
  dashboardId: string;
  connectionId?: string;
  config?: TileConfig;
  position?: { x: number; y: number; w: number; h: number };
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tile-editor-tabpanel-${index}`}
      aria-labelledby={`tile-editor-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

interface DimensionField {
  fieldId: string;
  fieldName: string;
  aggregation?: string;
}

interface MeasureField {
  fieldId: string;
  fieldName: string;
  aggregation: string;
  alias?: string;
}

interface TextRow {
  id: string;
  type: 'header' | 'subheader' | 'text';
  content: string;
  isQuery: boolean;
}

interface TileConfig {
  chartType?: 'bar' | 'line' | 'pie' | 'donut';
  dimensions?: DimensionField[];
  measures?: MeasureField[];
  textRows?: TextRow[];
  connectionId?: string;
  metadata?: {
    sqlQuery?: string;
    [key: string]: any;
  };
  sortBy?: {
    field: string;
    direction: 'asc' | 'desc';
  };
  limit?: number;
  measure?: MeasureField;
}

interface DatabaseField {
  name: string;
  type: string;
  table: string;
  description?: string;
}

interface Tile {
  id: string;
  title: string;
  type: 'chart' | 'table' | 'metric' | 'text';
  description?: string;
  connectionId?: string;
  config?: TileConfig;
}

interface TileEditorProps {
  open: boolean;
  onClose: () => void;
  tile?: Tile;
  dashboardId: string;
  onSave: () => void;
}

const TileEditor: React.FC<TileEditorProps> = ({
  open,
  onClose,
  tile,
  dashboardId,
  onSave
}) => {
  // Tab state
  const [tabValue, setTabValue] = useState(0);

  // Basic tile info
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [tileType, setTileType] = useState<'chart' | 'table' | 'metric' | 'text'>('chart');
  const [connectionId, setConnectionId] = useState('');
  const [chartType, setChartType] = useState<'bar' | 'line' | 'pie' | 'donut'>('bar');

  // Text tile rows
  const [textRows, setTextRows] = useState<TextRow[]>([{
    id: '1',
    type: 'header',
    content: '',
    isQuery: false
  }]);

  // Connection and fields
  const [connections, setConnections] = useState<DatabaseConnection[]>([]);
  const [selectedConnection, setSelectedConnection] = useState<DatabaseConnection | null>(null);
  const [databaseFields, setDatabaseFields] = useState<DatabaseField[]>([]);
  const [dimensions, setDimensions] = useState<DimensionField[]>([]);
  const [measures, setMeasures] = useState<MeasureField[]>([]);
  
  // UI states
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  
  // Store mapping between field IDs and their source tables (needed for SQL generation)
  const [fieldTableMap, setFieldTableMap] = useState<Map<string, string>>(new Map());

  // Load connections on mount
  useEffect(() => {
    const loadConnections = async () => {
      try {
        setLoading(true);
        const connList = await databaseConnectionService.getAllConnections();
        setConnections(connList.filter(conn => conn.status === 'active'));
        setLoading(false);
      } catch (error) {
        console.error('Failed to load database connections:', error);
        setError('Failed to load database connections');
        setLoading(false);
      }
    };

    if (open) {
      loadConnections();
    }
  }, [open]);

  // Initialize form when editing an existing tile
  useEffect(() => {
    if (!tile || !open) return;
    
    setName(tile.title || '');
    setDescription(tile.description || '');
    setTileType(tile.type || 'chart');
    
    if (tile.config) {
      setChartType(tile.config.chartType || 'bar');
      setDimensions(tile.config.dimensions || []);
      setMeasures(tile.config.measures || []);
      
      if (tile.connectionId) {
        setConnectionId(tile.connectionId);
      }

      if (tile.type === 'text' && tile.config.textRows) {
        setTextRows(tile.config.textRows);
      }
    }
  }, [tile, open]);
  
  // Load database fields when connection is selected
  useEffect(() => {
    if (connectionId) {
      loadConnectionSchema();
    }
  }, [connectionId]);

  const loadConnectionSchema = async () => {
    if (!connectionId) return;
    
    try {
      setLoading(true);
      setError('');
      
      const authHeaders = await getAuthHeaders();
      const response = await axios.get(`/api/connections/${connectionId}/schema`, { headers: authHeaders });
      console.log('Schema response:', response.data);
      
      // Extract fields from schema, handling different response formats
      let schemaData;
      if (response.data.schema) {
        schemaData = response.data.schema;
      } else if (response.data.data) {
        schemaData = response.data.data;
      } else {
        schemaData = response.data;
      }
      
      // Convert schema to a flat list of database fields
      const fields: DatabaseField[] = [];
      
      // Process schema based on its structure
      if (Array.isArray(schemaData)) {
        // Handle array of tables format
        schemaData.forEach((table: any) => {
          const tableName = table.name || table.table_name;
          if (table.columns) {
            table.columns.forEach((column: any) => {
              fields.push({
                name: column.name || column.column_name,
                type: column.type || column.data_type,
                table: tableName,
                description: column.description || ''
              });
            });
          }
        });
      } else if (typeof schemaData === 'object') {
        // Handle object format with tables as keys
        Object.keys(schemaData).forEach(tableName => {
          const columns = schemaData[tableName];
          if (Array.isArray(columns)) {
            columns.forEach(column => {
              fields.push({
                name: column.name || column.column_name,
                type: column.type || column.data_type,
                table: tableName,
                description: column.description || ''
              });
            });
          }
        });
      }
      
      setDatabaseFields(fields);
    } catch (err) {
      console.error('Error loading connection schema:', err);
      setError('Failed to load database schema');
    } finally {
      setLoading(false);
    }
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleChartTypeChange = (event: SelectChangeEvent) => {
    setChartType(event.target.value as 'bar' | 'line' | 'pie' | 'donut');
  };

  const handleConnectionChange = (event: SelectChangeEvent) => {
    setConnectionId(event.target.value);
    // Reset fields since the connection changed
    setDimensions([]);
    setMeasures([]);
    
    // Find the selected connection
    const connection = connections.find(c => c.id === event.target.value);
    setSelectedConnection(connection || null);
  };

  const handleAddDimension = (field: DatabaseField) => {
    const fieldId = `${field.table}.${field.name}`;
    const dimension: DimensionField = {
      fieldId,
      fieldName: field.name
    };
    
    // Check if field is already added
    if (!dimensions.some(d => d.fieldId === fieldId)) {
      setDimensions([...dimensions, dimension]);
      // Store table name for this field ID
      fieldTableMap.set(fieldId, field.table);
    }
  };

  const handleRemoveDimension = (index: number) => {
    const newDimensions = [...dimensions];
    newDimensions.splice(index, 1);
    setDimensions(newDimensions);
  };

  const handleAddMeasure = (field: DatabaseField) => {
    if (!isNumericField(field)) {
      // Only allow adding numeric fields as measures
      return;
    }
    
    // Check if measure already exists
    const exists = measures.some(m => m.fieldId === field.name);
    
    if (!exists) {
      const newMeasure: MeasureField = {
        fieldId: field.name,
        fieldName: field.name,
        aggregation: 'sum',
        alias: `${field.name}_sum` // Add alias property
      };
      
      setMeasures([...measures, newMeasure]);
      // Store table name for this field ID
      fieldTableMap.set(fieldId, field.table);
    }
  };

  const handleRemoveMeasure = (index: number) => {
    const newMeasures = [...measures];
    newMeasures.splice(index, 1);
    setMeasures(newMeasures);
  };

  const handleMeasureAggregationChange = (index: number, aggregation: string) => {
    setMeasures(prev => {
      const updated: MeasureField[] = [...prev];
      updated[index].aggregation = aggregation;
      return updated;
    });
  };

  // Functions for handling text tile rows
  const handleAddTextRow = () => {
    const newRow: TextRow = {
      id: uuidv4(), // Generate unique ID
      type: 'text',
      content: '',
      isQuery: false
    };
    
    setTextRows([...textRows, newRow]);
  };
  
  const handleTextChange = (index: number, value: string) => {
    const updatedRows = [...textRows];
    updatedRows[index].content = value;
    setTextRows(updatedRows);
  };
  
  const handleRemoveTextRow = (id: string) => {
    setTextRows(textRows.filter(row => row.id !== id));
  };
  
  const handleTextRowTypeChange = (id: string, type: 'header' | 'subheader' | 'text') => {
    setTextRows(textRows.map(row => 
      row.id === id ? { ...row, type } : row
    ));
  };
  
  const handleTextRowContentChange = (id: string, content: string) => {
    setTextRows(textRows.map(row => 
      row.id === id ? { ...row, content } : row
    ));
  };
  
  const handleToggleRowQueryMode = (id: string) => {
    setTextRows(textRows.map(row => 
      row.id === id ? { ...row, isQuery: !row.isQuery } : row
    ));
  };

  const handleSave = async () => {
    setError('');
    setSaving(true);
    
    try {
      // Generate final config object based on tile type
      let config: TileConfig = {};
      
      switch (tileType) {
        case 'chart':
          config = {
            chartType,
            dimensions,
            measures,
            metadata: {
              sqlQuery: generateSqlQuery()
            }
          };
          break;
        case 'table':
          config = {
            dimensions,
            measures,
            metadata: {
              sqlQuery: generateSqlQuery()
            }
          };
          break;
        case 'metric':
          if (measures.length === 0) {
            setError('At least one measure is required for a metric tile');
            setSaving(false);
            return;
          }
          config = {
            measure: measures[0],
            metadata: {
              sqlQuery: generateSqlQuery()
            }
          };
          break;
        case 'text':
          config = { textRows };
          break;
      }
      
      // Create tile data object
      const tileData: CreateTileDto = {
        title: name,
        description: description || undefined,
        type: tileType,
        dashboardId,
        connectionId: connectionId || undefined,
        config
      };
      
      // Create or update tile
      if (tile?.id) {
        await projectService.updateTile(tile.id, tileData);
      } else {
        await projectService.createTile(tileData);
      }
      
      onSave();
    } catch (error) {
      console.error('Failed to save tile:', error);
      setError(`Failed to save tile: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setSaving(false);
    }
  };

  const generateSqlQuery = (): string => {
    if (dimensions.length === 0 || measures.length === 0) {
      return '';
    }
    
    const tables = new Set<string>();
    const dimensionColumns: string[] = [];
    const measureColumns: string[] = [];
    
    // Collect tables and format columns
    dimensions.forEach(dim => {
      const table = fieldTableMap.get(dim.fieldId) || 'unknown_table';
      tables.add(table);
      dimensionColumns.push(`${table}.${dim.fieldName}`);
    });
    
    measures.forEach(measure => {
      const table = fieldTableMap.get(measure.fieldId) || 'unknown_table';
      tables.add(table);
      measureColumns.push(`${measure.aggregation}(${table}.${measure.fieldName}) as ${measure.alias}`);
    });
    
    // Build SQL query
    const tablesList = Array.from(tables);
    const selectClause = [...dimensionColumns, ...measureColumns].join(', ');
    const fromClause = tablesList[0]; // Start with first table
    const groupByClause = dimensionColumns.length > 0 ? `GROUP BY ${dimensionColumns.join(', ')}` : '';

    // Simple query for now - in a real app we would need to handle JOINs between tables
    return `SELECT ${selectClause} FROM ${fromClause} ${tablesList.length > 1 ? '/* JOIN logic needed for multiple tables */' : ''} ${groupByClause}`;
  };
  
  // Helper to determine if a field is numeric
  const isNumericField = (field: DatabaseField): boolean => {
    const numericTypes = ['number', 'integer', 'int', 'float', 'decimal', 'double', 'numeric'];
    return numericTypes.some(type => field.type.toLowerCase().includes(type));
  };

  // Helper function to get chart icon based on chart type
  const getChartIcon = (type: string) => {
    switch (type) {
      case 'bar':
        return <BarChartIcon />;
      case 'line':
        return <LineChartIcon />;
      case 'pie':
        return <PieChartIcon />;
      case 'donut':
        return <PieChartIcon />;
      default:
        return <BarChartIcon />;
    }
  };
  
  // These functions are already defined above
  // Removed duplicate declarations

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="md">
      <DialogTitle>
        {tile ? `Edit ${tile?.title || 'Tile'}` : 'Create New Tile'}
      </DialogTitle>
      <DialogContent dividers>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} aria-label="tile editor tabs">
            <Tab label="General" id="tile-editor-tab-0" aria-controls="tile-editor-tabpanel-0" />
            <Tab label="Data" id="tile-editor-tab-1" aria-controls="tile-editor-tabpanel-1" />
            <Tab label="Visualization" id="tile-editor-tab-2" aria-controls="tile-editor-tabpanel-2" />
          </Tabs>
        </Box>
        
        {/* General Tab */}
        <TabPanel value={tabValue} index={0}>
          <TextField
            autoFocus
            margin="dense"
            label="Tile Name"
            fullWidth
            variant="outlined"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            error={!name.trim()}
            helperText={!name.trim() ? 'Name is required' : ''}
            sx={{ mb: 2 }}
          />
          
          <TextField
            margin="dense"
            label="Description"
            fullWidth
            multiline
            rows={3}
            variant="outlined"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            sx={{ mb: 2 }}
          />
          
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Tile Type</InputLabel>
                <Select
                  value={tileType}
                  onChange={(e) => setTileType(e.target.value as 'chart' | 'table' | 'metric' | 'text')}
                  label="Tile Type"
                >
                  <MenuItem value="chart">Chart</MenuItem>
                  <MenuItem value="table">Table</MenuItem>
                  <MenuItem value="metric">Metric</MenuItem>
                  <MenuItem value="text">Text</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth required={tileType !== 'text'} error={!connectionId && error !== '' && tileType !== 'text'}>
                <InputLabel>Database Connection</InputLabel>
                <Select
                  value={connectionId}
                  onChange={handleConnectionChange}
                  label="Database Connection"
                >
                  <MenuItem value="">
                    <em>Select a database connection</em>
                  </MenuItem>
                  {connections.map((connection) => (
                    <MenuItem key={connection.id} value={connection.id}>
                      {connection.name}
                    </MenuItem>
                  ))}
                </Select>
                {!connectionId && error && tileType !== 'text' && (
                  <FormHelperText>Please select a database connection</FormHelperText>
                )}
              </FormControl>
            </Grid>

            {tileType === 'chart' && (
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel id="chart-type-select-label">Chart Type</InputLabel>
                  <Select
                    labelId="chart-type-select-label"
                    id="chart-type-select"
                    value={chartType}
                    label="Chart Type"
                    onChange={handleChartTypeChange}
                    startAdornment={
                      <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>
                        {getChartIcon(chartType)}
                      </Box>
                    }
                  >
                    <MenuItem value="bar">Bar Chart</MenuItem>
                    <MenuItem value="line">Line Chart</MenuItem>
                    <MenuItem value="pie">Pie Chart</MenuItem>
                    <MenuItem value="donut">Donut Chart</MenuItem>
                  </Select>
                  <FormHelperText>Select the type of visualization</FormHelperText>
                </FormControl>
              </Grid>
            )}
          </Grid>
        </TabPanel>
        
        {/* Data Tab */}
        <TabPanel value={tabValue} index={1}>
  {tileType === 'text' ? (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="h6">Text Content</Typography>
          <Button
            variant="outlined"
            startIcon={<AddIcon />}
            size="small"
            onClick={handleAddTextRow}
          >
            Add Row
          </Button>
        </Box>
        
        {textRows.map((row) => (
          <Paper
            key={row.id}
            variant="outlined"
            sx={{ p: 2, mb: 2 }}
          >
            <Grid container spacing={2}>
              {/* Row Controls */}
              <Grid item xs={12}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                  <ToggleButtonGroup
                    value={row.type}
                    exclusive
                    onChange={(_, newType) => newType && handleTextRowTypeChange(row.id, newType as 'header' | 'subheader' | 'text')}
                    size="small"
                  >
                    <ToggleButton value="header">
                      <TitleIcon fontSize="small" />
                      <Typography variant="body2" sx={{ ml: 1 }}>
                        Header
                      </Typography>
                    </ToggleButton>
                    <ToggleButton value="subheader">
                      <SubtitlesIcon fontSize="small" />
                      <Typography variant="body2" sx={{ ml: 1 }}>
                        Subheader
                      </Typography>
                    </ToggleButton>
                    <ToggleButton value="text">
                      <TextFieldsIcon fontSize="small" />
                      <Typography variant="body2" sx={{ ml: 1 }}>
                        Text
                      </Typography>
                    </ToggleButton>
                  </ToggleButtonGroup>
                  
                  <Box>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={row.isQuery}
                          onChange={() => handleToggleRowQueryMode(row.id)}
                          size="small"
                          disabled={!connectionId}
                        />
                      }
                      label={row.isQuery ? "SQL Query" : "Direct Text"}
                      labelPlacement="start"
                    />
                    <IconButton
                      size="small" 
                      color="error"
                      onClick={() => handleRemoveTextRow(row.id)}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Box>
                </Box>
              </Grid>
              
              {/* Content Input */}
              <Grid item xs={12}>
                {row.isQuery ? (
                  <TextField
                    label="SQL Query"
                    multiline
                    rows={4}
                    placeholder="SELECT column FROM table WHERE condition"
                    fullWidth
                    variant="outlined"
                    value={row.content}
                    onChange={(e) => handleTextRowContentChange(row.id, e.target.value)}
                    error={!connectionId}
                    helperText={!connectionId ? "Select a connection to enable SQL queries" : ""}
                    InputProps={{
                      startAdornment: <CodeIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    }}
                  />
                ) : (
                  <TextField
                    label={row.type.charAt(0).toUpperCase() + row.type.slice(1) + " Content"}
                    multiline
                    rows={row.type === 'header' ? 1 : row.type === 'subheader' ? 2 : 3}
                    placeholder={`Enter ${row.type} content here`}
                    fullWidth
                    variant="outlined"
                    value={row.content}
                    onChange={(e) => handleTextRowContentChange(row.id, e.target.value)}
                  />
                )}
              </Grid>
              
              {/* Preview of how the text will look */}
              {row.content && !row.isQuery && (
                <Grid item xs={12}>
                  <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
                    Preview:
                  </Typography>
                  {row.type === 'header' && (
                    <Typography variant="h4">{row.content}</Typography>
                  )}
                  {row.type === 'subheader' && (
                    <Typography variant="h5">{row.content}</Typography>
                  )}
                  {row.type === 'text' && (
                    <Typography variant="body1">{row.content}</Typography>
                  )}
                </Grid>
              )}
              
              {/* SQL Query result preview */}
              {row.isQuery && row.content && connectionId && (
                <Grid item xs={12}>
                  <Button
                    variant="outlined" 
                    size="small"
                    startIcon={<StorageIcon />}
                    onClick={() => {
                      // Logic to execute the SQL query and show results
                      console.log(`Execute query: ${row.content} on connection: ${connectionId}`);
                    }}
                  >
                    Test Query
                  </Button>
                </Grid>
              )}
            </Grid>
          </Paper>
        ))}
        
        {textRows.length === 0 && (
          <Box sx={{ textAlign: 'center', py: 4 }}>
            <Typography color="text.secondary">
              No text rows added. Click "Add Row" to create content.
            </Typography>
          </Box>
        )}
      </Grid>
    </Grid>
  ) : (
    <Grid container spacing={3}>
      {/* For non-text tile types, show dimensions and measures */}
      <Grid item xs={12} md={6}>
        <Box sx={{ mb: 2 }}>
          <Typography variant="h6" gutterBottom>Dimensions</Typography>
          <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
            {dimensions.length > 0 ? (
              dimensions.map((dimension, index) => (
                <Chip
                  key={index}
                  label={dimension.fieldName}
                  onDelete={() => handleRemoveDimension(index)}
                  sx={{ m: 0.5 }}
                />
              ))
            ) : (
              <Typography color="text.secondary">
                No dimensions selected. Select fields from the list below.
              </Typography>
            )}
          </Paper>
          
          <Typography variant="subtitle2" gutterBottom>Available Fields</Typography>
          <Paper variant="outlined" sx={{ p: 2, maxHeight: 200, overflow: 'auto' }}>
            {databaseFields.map((field) => (
              <Chip
                key={field.name + field.table}
                label={`${field.table}.${field.name}`}
                onClick={() => handleAddDimension(field)}
                sx={{ m: 0.5, cursor: 'pointer' }}
                variant="outlined"
              />
            ))}
            {databaseFields.length === 0 && (
              <Typography color="text.secondary">
                {loading ? 'Loading fields...' : 'Select a connection to view available fields'}
              </Typography>
            )}
          </Paper>
        </Box>
      </Grid>
      
      <Grid item xs={12} md={6}>
        <Box sx={{ mb: 2 }}>
          <Typography variant="h6" gutterBottom>Measures</Typography>
          <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
            {measures.length > 0 ? (
              measures.map((measure, index) => (
                <Box key={index} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Chip
                    label={`${measure.aggregation}(${measure.fieldName})`}
                    onDelete={() => handleRemoveMeasure(index)}
                    sx={{ mr: 1 }}
                  />
                  <Select
                    value={measure.aggregation}
                    onChange={(e) => handleMeasureAggregationChange(index, e.target.value)}
                    size="small"
                    sx={{ minWidth: 100 }}
                  >
                    <MenuItem value="sum">Sum</MenuItem>
                    <MenuItem value="avg">Average</MenuItem>
                    <MenuItem value="min">Min</MenuItem>
                    <MenuItem value="max">Max</MenuItem>
                    <MenuItem value="count">Count</MenuItem>
                  </Select>
                </Box>
              ))
            ) : (
              <Typography color="text.secondary">
                No measures selected. Select fields from the list below.
              </Typography>
            )}
          </Paper>
          
          <Typography variant="subtitle2" gutterBottom>Available Fields</Typography>
          <Paper variant="outlined" sx={{ p: 2, maxHeight: 200, overflow: 'auto' }}>
            {databaseFields.map((field) => (
              <Chip
                key={field.name + field.table}
                label={`${field.table}.${field.name}`}
                onClick={() => isNumericField(field) ? handleAddMeasure(field) : null}
                sx={{
                  m: 0.5,
                  cursor: isNumericField(field) ? 'pointer' : 'not-allowed',
                  opacity: isNumericField(field) ? 1 : 0.5
                }}
                variant="outlined"
              />
            ))}
            {databaseFields.length === 0 && (
              <Typography color="text.secondary">
                {loading ? 'Loading fields...' : 'Select a connection to view available fields'}
              </Typography>
            )}
          </Paper>
        </Box>
      </Grid>
      
      {/* Generated SQL query section */}
      {dimensions.length > 0 && measures.length > 0 && (
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom>
                  Generated SQL Query
                </Typography>
                <Paper 
                  variant="outlined" 
                  sx={{ 
                    p: 2,
                    backgroundColor: '#f5f5f5',
                    fontFamily: 'monospace',
                    overflow: 'auto',
                    maxHeight: 300
                  }}
                >
                  <pre style={{ margin: 0 }}>
                    {generateSqlQuery()}
                  </pre>
                </Paper>
                <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                  Note: This is a preview of the SQL query that will be generated. Actual JOIN conditions will be determined based on foreign key relationships.
                </Typography>
              </Grid>
            )}
      </Grid>
    </Grid>
  )}
</TabPanel>
        
        {/* Visualization Tab */}
        <TabPanel value={tabValue} index={2}>
          <Box sx={{ p: 3 }}>
            {/* Preview content */}
            <Typography variant="h6" gutterBottom>Preview</Typography>
            <Typography variant="body1">This is a preview of your tile.</Typography>
          </Box>
        </TabPanel>
      </DialogContent>
      <DialogActions sx={{ px: 3, py: 2 }}>
        <Button onClick={onClose}>Cancel</Button>
        <Button
          variant="contained"
          onClick={handleSave}
          disabled={saving || !name.trim() || (tileType !== 'text' && !connectionId)}
        >
          {saving ? (
            <CircularProgress size={24} />
          ) : (
            tile ? 'Update' : 'Create'
          )}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default TileEditor;
